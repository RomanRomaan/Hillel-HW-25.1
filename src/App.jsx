import React from "react";
import "./App.css";

// –°–º–∞–π–ª—ã –∏ –∫–ª—é—á –¥–ª—è localStorage
const EMOJIS = ["üòÉ", "üòä", "üòé", "ü§©", "üòç"];
const LS_KEY = "emoji-votes-v1";

class App extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            votes: EMOJIS.map((e) => ({ emoji: e, count: 0 })),
            winnerIdx: null, // –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ null)
        };
    }

    componentDidMount() {
        try {
            const saved = JSON.parse(localStorage.getItem(LS_KEY));
            if (Array.isArray(saved) && saved.length === EMOJIS.length) {
                this.setState({ votes: saved });
            }
        } catch (_) { }
    }

    handleVote = (idx) => {
        this.setState(
            (prev) => {
                const updatedVotes = prev.votes.map((voteItem, index) => {
                    if (index === idx) {
                        return { ...voteItem, count: voteItem.count + 1 };
                    } else {
                        return voteItem;
                    }
                });
                // –≤–µ—Ä–Ω—É—Ç—å –Ω–æ–≤—ã–π state
                return { votes: updatedVotes };
            },
            () => {
                localStorage.setItem(LS_KEY, JSON.stringify(this.state.votes));
            }
        );
    };

    showResults = () => {
        // –¥–æ—Å—Ç–∞—ë–º –º–∞—Å—Å–∏–≤ –≥–æ–ª–æ—Å–æ–≤ –∏–∑ state
        const votesArray = this.state.votes;

        // –±–µ—Ä—ë–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è count (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤) –∏ –∏—â–µ–º –º–∞–∫—Å–∏–º—É–º
        const maxCount = Math.max(...votesArray.map((voteItem) => voteItem.count));

        // –∏—â–µ–º –∏–Ω–¥–µ–∫—Å –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞, —É –∫–æ—Ç–æ—Ä–æ–≥–æ count —Ä–∞–≤–µ–Ω –º–∞–∫—Å–∏–º—É–º—É
        const winnerIndex = votesArray.findIndex(
            (voteItem) => voteItem.count === maxCount
        );

        // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ state
        this.setState({ winnerIdx: winnerIndex });
    };

    clearResults = () => {
        const reset = EMOJIS.map((e) => ({ emoji: e, count: 0 }));
        this.setState({ votes: reset, winnerIdx: null }, () => {
            localStorage.removeItem(LS_KEY);
        });
    };

    totalVotes() {
        return this.state.votes.reduce((sum, voteItem) => {
            return sum + voteItem.count;
        }, 0);
    }

    render() {
        const { votes, winnerIdx } = this.state;
        const winnerEmojiObject = winnerIdx !== null ? votes[winnerIdx] : null;

        return (
            <div className="page">
                <h1 className="title">–ì–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞ –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–º–∞–π–ª–∏–∫</h1>

                <div className="row">
                    {votes.map((voteItem, voteIndex) => (
                        <div key={voteIndex} className="emojiCol">
                            <button
                                type="button"
                                onClick={() => this.handleVote(voteIndex)}
                                className="emojiBtn"
                                aria-label={`–ì–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ ${voteItem.emoji}`}
                                title="–ù–∞—Ç–∏—Å–Ω–∏, —â–æ–± –ø—Ä–æ–≥–æ–ª–æ—Å—É–≤–∞—Ç–∏"
                            >
                                <span className="emoji">{voteItem.emoji}</span>
                            </button>
                            <div className="count">{voteItem.count}</div>
                        </div>
                    ))}
                </div>

                <div className="actions">
                    <button
                        type="button"
                        onClick={this.showResults}
                        className="primary"
                    >
                        Show Results
                    </button>
                    <button
                        type="button"
                        onClick={this.clearResults}
                        className="danger"
                    >
                        –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
                    </button>
                </div>

                <div className="results">
                    <h2 className="subtitle">–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è:</h2>
                    {winnerEmojiObject ? (
                        <div className="resultsInner">
                            <div className="label">–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å:</div>
                            <div className="winnerEmoji">{winnerEmojiObject.emoji}</div>
                            <div className="smallNote">
                                –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª–æ—Å—ñ–≤: {winnerEmojiObject.count}
                            </div>
                            <div className="smallNote">
                                –í—Å—å–æ–≥–æ –≥–æ–ª–æ—Å—ñ–≤: {this.totalVotes()}
                            </div>
                        </div>
                    ) : (
                        <div className="smallNote">–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´Show Results¬ª</div>
                    )}
                </div>
            </div>
        );
    }

}
export default App;
